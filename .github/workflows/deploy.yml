name: Build & Deploy

on:
  push:
    branches: [main]

jobs:
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ] || [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "::error::Missing required secret: GCP_SA_KEY or GCP_PROJECT_ID" && exit 1
          fi

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set run/region us-central1

      - name: Build and push backend container
        id: build
        run: |
          IMAGE_TAG="${{ github.sha }}"
          gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/peazy-agent:$IMAGE_TAG gemini-multimodal-live-demo-main/server/
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-backend:
    name: Deploy Backend to Cloud Run
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ] || [ -z "${{ secrets.GCP_PROJECT_ID }}" ] || [ -z "${{ secrets.GEMINI_API_KEY }}" ] || [ -z "${{ secrets.DAILY_API_KEY }}" ]; then
            echo "::error::Missing required secret: GCP_SA_KEY, GCP_PROJECT_ID, GEMINI_API_KEY, or DAILY_API_KEY" && exit 1
          fi

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set run/region us-central1

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy peazy-agent \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/peazy-agent:${{ needs.build-backend.outputs.image-tag }} \
            --region us-central1 \
            --port 7860 \
            --min-instances 1 \
            --max-instances 3 \
            --set-env-vars "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},DAILY_API_KEY=${{ secrets.DAILY_API_KEY }},DAILY_DOMAIN_NAME=${{ secrets.DAILY_DOMAIN_NAME }},PIPECAT_CLOUD_API=${{ secrets.PIPECAT_CLOUD_API }}" \
            --execution-environment gen2 \
            --timeout 900s

  frontend-deploy:
    name: Build & Upload Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ] || [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "::error::Missing required secret: GCP_SA_KEY or GCP_PROJECT_ID" && exit 1
          fi

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        run: |
          cd gemini-multimodal-live-demo-main/client
          rm -rf node_modules package-lock.json
          npm install
          npm run build

      - name: Upload to GCS
        run: |
          BUCKET=${{ secrets.GCP_PROJECT_ID }}-web
          gsutil mb -l us-central1 -p ${{ secrets.GCP_PROJECT_ID }} gs://$BUCKET || true
          gsutil -m rsync -r -c gemini-multimodal-live-demo-main/client/dist gs://$BUCKET
          gsutil -m setmeta -h "Cache-Control:public,max-age=3600" gs://$BUCKET/**

      - name: Output URLs
        run: |
          echo "Cloud Run URL: https://console.cloud.google.com/run/detail/us-central1/peazy-agent/overview?project=${{ secrets.GCP_PROJECT_ID }}"
          echo "Frontend URL: https://${{ secrets.GCP_PROJECT_ID }}-web.storage.googleapis.com/index.html" 